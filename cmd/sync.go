// Code generated by cli-generator; DO NOT EDIT.
package cmd



import (
	
	handler "github.com/olegsu/trello-sync/pkg/sync"
	
	"github.com/spf13/cobra"
)

var syncCmdOptions struct {
	trelloAppKey string
	trelloToken string
	trelloBoardId string
	googleServiceAccount string
	googleSpreadsheetId string
	kubernetesContext string
	kubernetesNamespace string
	kubernetesKubeconfigPath string
	kubernetesInCluster bool
	
}

var syncCmd = &cobra.Command{
	Use:     "sync",

	RunE: func(cmd *cobra.Command, args []string) error {
		h := &handler.Handler{}
		return h.Handle(cnf)
	},
	Long: "Sync Trello board to Google Speadsheet",
	PreRun: func(cmd *cobra.Command, args []string) {
		rootCmd.PreRun(cmd, args)
		
		cnf.Set("trelloAppKey", syncCmdOptions.trelloAppKey)
		
		cnf.Set("trelloToken", syncCmdOptions.trelloToken)
		
		cnf.Set("trelloBoardId", syncCmdOptions.trelloBoardId)
		
		cnf.Set("googleServiceAccount", syncCmdOptions.googleServiceAccount)
		
		cnf.Set("googleSpreadsheetId", syncCmdOptions.googleSpreadsheetId)
		
		cnf.Set("kubernetesContext", syncCmdOptions.kubernetesContext)
		
		cnf.Set("kubernetesNamespace", syncCmdOptions.kubernetesNamespace)
		
		cnf.Set("kubernetesKubeconfigPath", syncCmdOptions.kubernetesKubeconfigPath)
		
		cnf.Set("kubernetesInCluster", syncCmdOptions.kubernetesInCluster)
		
	},
}




func init() {

	syncCmd.PersistentFlags().StringVar(&syncCmdOptions.trelloAppKey, "trello-app-key", cnf.GetString("trelloAppKey"), "")

	syncCmd.PersistentFlags().StringVar(&syncCmdOptions.trelloToken, "trello-token", cnf.GetString("trelloToken"), "")

	syncCmd.PersistentFlags().StringVar(&syncCmdOptions.trelloBoardId, "trello-board-id", cnf.GetString("trelloBoardId"), "")

	syncCmd.PersistentFlags().StringVar(&syncCmdOptions.googleServiceAccount, "google-service-account", cnf.GetString("googleServiceAccount"), "")

	syncCmd.PersistentFlags().StringVar(&syncCmdOptions.googleSpreadsheetId, "google-spreadsheet-id", cnf.GetString("googleSpreadsheetId"), "")

	syncCmd.PersistentFlags().StringVar(&syncCmdOptions.kubernetesContext, "kubernetes-context", cnf.GetString("kubernetesContext"), "")

	syncCmd.PersistentFlags().StringVar(&syncCmdOptions.kubernetesNamespace, "kubernetes-namespace", cnf.GetString("kubernetesNamespace"), "")

	syncCmd.PersistentFlags().StringVar(&syncCmdOptions.kubernetesKubeconfigPath, "kubernetes-kubeconfig-path", cnf.GetString("kubernetesKubeconfigPath"), "")

	syncCmd.PersistentFlags().BoolVar(&syncCmdOptions.kubernetesInCluster, "kubernetes-in-cluster", cnf.GetBool("kubernetesInCluster"), "")
	rootCmd.AddCommand(syncCmd)
}